#!/usr/bin/env python3
# coding:utf-8

# pow(x,y) x的y次方
# 二进制，以0b或者0B开头，比如：0b010, 0B101
# 八进制，以0o或者0O开头，比如：0o675, 0O123
# 十六进制，以0x或者0X开头，比如:0x9a, 0X89

# 天天向上的力量，每天进步百分之一
print(pow(1.01,365))     # 37.78343433288728
print(pow(0.99,365))     # 0.025517964452291125

# 天天向上的力量，每天进步千分之一
print(pow(1.001,365))     # 1.4402513134295205
print(pow(0.999,365))     # 0.6940698870404745

# 天天向上的力量，每天进步

'''
浮点数间运算存在不确定尾数，不是bug
原因在于：0.1在计算机二进制表示中，可以无限接近，但不完全相同
'''
print(0.1 + 0.2)                    # 0.30000000000000004
print(0.1+0.2 == 0.3)               # False

# round(x,y): 对x进行四舍五入，保留y位，比如：
print(round(0.1+0.2,1) == 0.3)      # True

'''
科学技术法：使用e或者E作为幂的符号，以10为基数，格式：
<a>e<b>  表示 a*10的b次方，比如：
'''
print(4.3e-3)           # 0.0043
print(9.6E5)            # 960000.0

'''
x/y 得到的结果是浮点数，比如 10/3 --> 3.3333333333333335
x//y 得到结果是整数，比如： 10//3 --> 3
x**y 就是pow(x,y)
'''
print(10/3)
print(10//3)

'''
abs(x)              绝对值
divmod(x,y)         也就是(x//y, x%y)输出商和模
pow(x,y,z)          也就是(x**y)%z, z可忽略
round(x,y)          对x进行四舍五入，保留y位，y默认为0
min(x1,x2,x3, ...)  最小值
max(x1,x2,x3, ...)  最大值
inx(x)              将x变为整数
float(x)            将x变为浮点数，比如：float("123")     -> 123.0
'''


